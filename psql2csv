#!/usr/bin/env bash

set -e

function usage() {
  echo 'psql2csv: Run a query in psql and output the result as CSV.'
  echo
  echo 'Usage:'
  echo '  psql2csv [OPTIONS] < QUERY'
  echo '  psql2csv [OPTIONS] QUERY'
  echo
  echo 'OPTIONS:'
  echo '  The query is assumed to be the contents of STDIN, if present, or the last argument.'
  echo '  All other arguments are forwarded to psql except for these:'
  echo
  echo '  -?, --help             show this help, then exit'
  echo '  --delimiter=DELIMITER  use a different delimiter than comma (e.g. $'"'\\t'"' for tab)'
  echo '  --null=NULL            specify a string that represents a NULL value (defaults to nothing)'
  echo '  --encoding=ENCODING    use a different encoding than UTF8 (Excel likes LATIN1)'
  echo '  --no-header            do not output a header'
  echo '  --dry-run              print the query that would be run without running it'
  echo
  echo 'Example usage:'
  echo
  echo '  $ psql2csv dbname "select * from table" > data.csv'
  echo
  echo '  $ psql2csv dbname < query.sql > data.csv'
  echo
  echo '  $ psql2csv --no-header --delimiter=$'"'\\t'"' --encoding=latin1 dbname <<sql'
  echo '  > SELECT *'
  echo '  > FROM some_table'
  echo '  > WHERE some_condition'
  echo '  > LIMIT 10'
  echo '  > sql'
  echo
  echo 'Author: Philipe Fatio <me@phili.pe>, http://phili.pe/, @fphilipe'
}

# Escapes single quotes, necessary in SQL strings.
function escape() {
  echo "${1//\'/''}"
}

DRY_RUN=false
HEADER=true
DELIMITER=,
NULL=
ENCODING=UTF8
PSQL_ARGS=()

while [ $# -gt 0 ]
do
  case "$1" in
    --help|-?)     usage; exit;;
    --dry-run)     DRY_RUN=true;        shift;;
    --no-header)   HEADER=false;        shift;;
    --delimiter)   DELIMITER="$2";      shift 2;;
    --delimiter=*) DELIMITER="${1#*=}"; shift;;
    --null)        NULL="$2";           shift 2;;
    --null=*)      NULL="${1#*=}";      shift;;
    --encoding)    ENCODING="$2";       shift 2;;
    --encoding=*)  ENCODING="${1#*=}";  shift;;
    *)             PSQL_ARGS+=("$1");   shift;;
  esac
done

if ! [ -t 0 ]; then
  # STDIN is open, thus read query from STDIN.
  QUERY=$(cat)
fi
if [ -z "$QUERY" ]; then
  # STDIN was not open or was empty, thus the query is the last argument.
  [ ${#PSQL_ARGS} -eq 0 ] && usage && exit 1
  QUERY=${PSQL_ARGS[@]: -1}
  unset PSQL_ARGS[${#PSQL_ARGS[@]}-1]
fi

# Replace trailing semicolons. sed needs at least two lines with the given
# arguments, otherwise the query ends up empty.
QUERY="$((echo "$QUERY"; echo) | sed -E -e ':a' -e 'N' -e '$!ba' -e '$s/([[:space:]]*;+[[:space:]]*)+$//')"
COMMAND="\
COPY ($QUERY) TO STDOUT WITH (\
FORMAT csv, \
HEADER $HEADER, \
DELIMITER '$(escape "$DELIMITER")', \
NULL '$(escape "$NULL")', \
ENCODING '$(escape "$ENCODING")'\
)"

if [ "$DRY_RUN" = true ]
then echo "$COMMAND"
else psql --command="$COMMAND" ${PSQL_ARGS[@]}
fi
